----------------------------------------------------------------------
h1. Installation

h3. Goal

* To install a working version of Rake on your machine.

h2. Installing Ruby gets Rake

p. In order to run the immersion, you need Ruby installed.
Rake is distributed as part of the Ruby installation.
If you do not already have Ruby setup, please visit <a href="http://ruby-lang.org/en/downloads" target="_blank">http://ruby-lang.org/en/downloads</a> for operating system specific instructions.

p. To verify your Ruby installation,

execute:
ruby --version

p. Any response for Ruby with a version number greater than 1.8 is fine.

p. By the way, you need to know some Ruby to get the most from this tutorial.
If you feel your Ruby experience is wanting, try "(external)Ruby Koans":http://rubykoans.com to gain enlightnment.

h2. Make sure Rake is <i>Ready To Go!</i>

p. <em>(It probably is, but in case you're having problems...)</em>

p. To make sure Rake is working correctly, change directory into the top project directory of rake and

execute:
rake

p. if you already have a version of rake installed, or

execute:
ruby -Ilib bin/rake

p. otherwise.

h2. Hey, wait just a second...

p. Yes, you saw it.
We ran Rake to test Rake.
This may feel a bit self-referential, but that's part of the magic.

p. *Executing Rake with no arguments conventionally runs the tests on a project.*

p. In this context Rake was operating on the Rake project, running its tests.
It's incredibly useful - but more about this later.

p. The immersion will be introducing convention along with content, helping you to become savvy as well as proficient.

----------------------------------------------------------------------
h1. An Example: Building a Web Site

h3. Goal

* To introduce a problem that will be solved using Rake in the tutorial.

h2. The Initial Problem Domain

p. The tutorial focuses on learning by doing, so we're going to use Rake to build a static website.
It will be simple at first, but we'll iterate as we go on.
Our use of Rake will iterate as well.

<img id="web1" src="content_images_web1.jpg">

p. Our starting point is about as simple as it can be.
We have a Web Site Project Directory with a src and html directory below it.
The src directory contains an index.md that needs to be transformed into an index.html file in the html directory.

p. (In case you didn't know: md is the extention for markdown, indicating the file is encoded using "(external)textile":http://textile.thresholdstate.com format; html is the extension for hypertext markup language, the lingua franca of web sites.)

h2. Creating the Project

p. Run a few quick command in a shell to get things started.

Execute:
mkdir WSProject
cd WSProject
mkdir src html
echo "p. Hello, World" > src/index.md


----------------------------------------------------------------------
h1. A Simple File task

h3. Goal

* To create and run a simple _file_ task in a Rakefile.

h2. Markdown to HTML

p. We want to run Rake and have it do the markdown-to-html transformation of the index file for us.
We're going to use the _file_ task in Rake to accomplish this, but Rake will only set up the dependency and automation framework for us - we'll still need to do the actual file conversion.
To figure it out, we'll use irb.

p. Irb is the playground of the ruby world.
In it you can test ideas, exploring as you go along, experimenting so you can get it right more quickly.
And it's on your system now!

p. Here we'll give "(external)RedCloth":http://redcloth.org a try - it's a rubygem that converts textile to html.
Looking at the documentation, it appears that we can convert textile to html by creating a new RedCloth object with a String of textile and call it's html method.
Let's try it.

Execute:
.irb
.require "RedCloth"
.s = "p. Hello, World\n"
.RedCloth.new(s).to_html
.quit
=irb

Session:
=irb
EOF

p. Success! Now we can build a Rakefile.

h2. Creating a Rakefile

p. What is a Rakefile?

p. When you run Rake, it looks for a file named Rakefile in the current directory (or looks for one recursively up the directory tree) and interprets its contents as the instructions rake will use to perform the tasks you've asked it to do. _(It also looks for rakefile, Rakefile.rb or rakefile.rb, but we'll use Rakefile for consistency.)_

p. With this in mind, put the Rakefile directly in the project directory.

File: Rakefile
require "RedCloth"

file "html/index.html" => "src/index.md" do
  open("html/index.html","w") do |target|
    puts "   generating #{target.path}"
    textile = IO.read "src/index.md"
    target.write RedCloth.new(textile).to_html
  end 
end
EOF

p. Here we have a _file_ task that basically indicates the goal is to create a file "html/index.html" that depends on "src/index.md".
When this task is run, if the file is missing or the dependency has changed, the Ruby code between the _do_ and the _end_ will be executed.

p. Notice that what's between the _do_ and the _end_ is just Ruby code.
Here, Rake is just adding the smarts to understand what the _file_ construct means and the framework to apply the task.
Nothing special - but really, that _is_ special.
We have the entirety of Ruby at our disposal!

p. Notice that there's also a _puts_ in the action.
This isn't generally needed, but for the tutorial this will provide some insight to when things are running and when they're not.
It's just Ruby code, and you really can add whatever you'd like to it.

h2. Check it out

p. We have the project.
We have a Rakefile.
Go ahead and try it.

Execute:
rake html/index.html
=rake
ls html
=html
cat html/index.html
=contents

Output:
=rake
=html
=contents
EOF

p. We've got the html output we wanted in the html/index.html file.
Rake is working for us!

h2. One more time

p. Let's run that first Rakefile one more time, right now.

Execute:
rake html/index.html
=rake
ls html
=html

Output:
=rake
=html
EOF

p. Wait. The files there, but why didn't the file get generated this time?

p. _Because Rake worked the first time!_
The second time we ran it, the file was already there.
The dependency didn't change, so Rake didn't need to regenerate it, and it didn't.

p. Rake is doing it's thing correctly - but since we're going to be reworking the same projects as we move through the tutorial, we'll want to cleanse the project between Rake runs so we can make things generate for us.
Fortunately, Rake has some built in goodness to make this easy.

p. But first, since we have a little bit of Rake under our belts, let's step back and say a few words about a few words.

----------------------------------------------------------------------
h1. Rake Vocabulary

h3. Goal

* To understand a few words in a Rake-oriented context.

h2. Fancy Words

p. A *task* is used to compartmentalize work in Rake.
Generally, every high level activity a user of your Rakefile may want to do is written as a task.
Each task has a unique name that is used to reference it, *actions* that make up the automation that is run to perform the task, and a list of *dependencies* that must be completed before the automation may be performed.
An action is normal Ruby code - you can do anything you're allowed to in Ruby.
A dependency is the name of a task, either a single name of an array of names.

p. A *file task* is what we just wrote.
It's target is a file, it's dependencies are the files that it will be built from and it's automation is run to build the file.

p. A *file list* is an array of files that Rake will build for us and that can be used as the dependencies of tasks.

p. As you go on, we'll see more about how these are generated and used.
For now, it's enough for you to have seen the terms so you don't feel like you've been blindsided.

----------------------------------------------------------------------
h1. Housekeeping - Clean and Clobber

h3. Goals

* To be able to clean up as we move forward so previous results don't look like current results.
* To learn about the Clean and Clobber tasks.

h2. Clean and Clobber

p. Sometimes when you're building a target, there may some stray files left around, cluttering up the directories.
We could walk through the directories ourselves and purge the files out, but Rake is about automating and this task is ripe for it.

p. Rake has a two built-in cleansing tasks, _clean_ and _clobber_, that you get when you require the _rake/clean_ file in your rake file.

File: Rakefile
require "rake/clean"
require "RedCloth"

CLOBBER.include "html/index.html"

file "html/index.html" => "src/index.md" do
  open("html/index.html","w") do |target|
    puts "   generating #{target.path}"
    textile = IO.read "src/index.md"
    target.write RedCloth.new(textile).to_html
  end 
end
EOF

h2. Let's try again

Execute:
rake clobber
=clobber
rake html/index.html
=rake
ls html
=html

Output:
=clobber
=rake
=html
EOF

p. Great - we now can clobber and regenerate.
Just what we want before moving forward.

----------------------------------------------------------------------
h1. Expanding the Project

h3. Goal

* To motivate you to generalize the _file_ task

h2. Another file

p. While it's clear that converting one file was simplistic, it did show how the _file_ task worked.
Let's go ahead and add a second markdown file to out project.

Execute:
echo "p. Goodbye, for now!" > src/goodbye.md

p. We'd like to convert this file in the same way.
Easy!
We can just add another _file_ task.

File: Rakefile
require "rake/clean"
require "RedCloth"

CLOBBER.include "html/index.html"

file "html/index.html" => "src/index.md" do
  open("html/index.html","w") do |target|
    puts "   generating #{target.path}"
    textile = IO.read "src/index.md"
    target.write RedCloth.new(textile).to_html
  end 
end

CLOBBER.include "html/goodbye.html"

file "html/goodbye.html" => "src/goodbye.md" do
  open("html/goodbye.html","w") do |target|
    puts "   generating #{target.path}"
    textile = IO.read "src/goodbye.md"
    target.write RedCloth.new(textile).to_html
  end 
end
EOF

p. Now let's give it a try.

Execute:
rake clobber
=clobber
rake html/index.html
=rake1
rake html/goodbye.html
=rake2
ls html
=html

Output:
=clobber
=rake1
=rake2
=html
EOF

p. This does just what you probably had expected.

h2. What's that smell?

p. Okay, now let's add another file.
Or maybe three more.
Or ten.

p. If we were to proceed in this fashion, our Rakefile would quickly become longer.
And look at all the repeated code - so brittle and redundant!
In the world of Agile Development, these are regarded as _bad smells_.

p. As you can probably see there are two types of rendancy here.
First, we are specifiying a file task for each file, and second, we are calling Rake once for every file we have to build.

p. Something should probably be done when the smell gets too bad.
Know though that everyone has there own tolerence of stench: In this case, two, or even three files might not be smelly enough to some to make them clean things up.
For others, they'd jump in and grab a mop at the first hint of an odor.

p. Let's proceed as if we're the second type of person.

----------------------------------------------------------------------
h1. A Simple Task

h3. Goal

* To create and run a simple _task_ task in a Rakefile.

h2. Simpler Calling

p. If you want to build all the html files in the site with one call, doing something like

Execute:
rake html

p. you need to call the individual _file_ tasks in the Rakefile.
It isn't a _file_ task itself, it's just a task.
Let's do that.

h2. A task to convert the files

p. We'll simply define a task to build our two files

File: Rakefile
require "rake/clean"
require "RedCloth"

html_files = [ "html/index.html", "html/goodbye.html" ]

CLOBBER.include html_files

task "html" => html_files

file "html/index.html" => "src/index.md" do
  open("html/index.html","w") do |target|
    puts "   generating #{target.path}"
    textile = IO.read "src/index.md"
    target.write RedCloth.new(textile).to_html
  end 
end

file "html/goodbye.html" => "src/goodbye.md" do
  open("html/goodbye.html","w") do |target|
    puts "   generating #{target.path}"
    textile = IO.read "src/goodbye.md"
    target.write RedCloth.new(textile).to_html
  end 
end
EOF

p. Oh, and look - we include both files for clobbering in one statement.
_Less smell!_

p. When we give it a run,

Execute:
rake clobber
=clobber
rake html
=rake
ls html
=ls

Output:
=clobber
=rake
=ls
EOF

p. we get just what we should.
But let's keep going.

h2. An iteration across the files

p. What you may be starting to notice is that not just the automation in the tasks is Ruby - _everything in a Rakefile is Ruby!_
And like everything else in Ruby, Rake tasks are actually _defined_ at runtime during the interpretation of the Ruby code, not statically by some compiler to make an executable.
Perhaps suprisingly, this means we can define our tasks in an iteration!
This lets us do

File: Rakefile
require "rake/clean"
require "RedCloth"

html_files = [ "html/index.html", "html/goodbye.html" ]

CLOBBER.include html_files

task "html" => html_files

html_files.each do |html_file|
  src_file = html_file.gsub(/^html\//,"src/").gsub(/\.html$/,".md")
  file html_file => src_file do
    open(html_file,"w") do |target|
      puts "   generating #{target.path}"
      textile = IO.read src_file
      target.write RedCloth.new(textile).to_html
    end 
  end
end
EOF

p. Let's try this one

Execute:
rake clobber
=clobber
rake html
=rake
ls html
=ls

Output:
=clobber
=rake
=ls
EOF

p. Beautiful!
But we can do more.

----------------------------------------------------------------------
h1. Congratulations!

p. You should now be ready to use Rake like a pro.
Of course, while practice makes perfect, even the pros aren't expected to remember everything.
The index link on these pages, if you haven't explored it already, leads to a topic-based index that should get you back to relevant spots in the tutorial or the Rake User's Guide.
Hopefully this will get past anything the tutorial hasn't covered or into advanced topics it couldn't.

p. Rake is living software - it's under active development and Jim works hard to keep it moving forward.

p. If you have any comments or suggestions on the tutorial or Rake itself, feel free to contact us at ...

